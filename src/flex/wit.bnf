{
    parserClass = "com.github.bytecodealliance.language.parser.WitParser"
    parserUtilClass = "com.github.bytecodealliance.language.psi.ParserExtension"

    extends = "com.github.bytecodealliance.language.psi.WitElement"

    psiClassPrefix = "Wit"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.bytecodealliance.language.psi"
    psiImplPackage = "com.github.bytecodealliance.language.psi_node"

    elementTypeHolderClass = "com.github.bytecodealliance.language.psi.WitTypes"
    elementTypeClass = "com.github.bytecodealliance.language.psi.WitElementType"
    tokenTypeClass = "com.github.bytecodealliance.language.psi.WitTokenType"

    psiImplUtilClass = "com.github.bytecodealliance.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL    = "Symbol"
        REFERENCE = "$Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"

		KW_PACKAGE     = "package"
		KW_WORLD       = "world"
		KW_INTERFACE   = "interface"
		KW_INCLUDE     = "include"
		KW_EXPORT      = "export"
		KW_IMPORT      = "import"
		KW_USE         = "use"
		KW_AS          = "as"
		KW_TYPE        = "type"
		KW_RESOURCE    = "resource"
		KW_RECORD      = "record"
		KW_ENUM        = "enum"
		KW_FLAGS       = "flags"
		KW_VARIANT     = "variant"
		KW_FUNCTION    = "func"
		KW_CONSTRUCTOR = "constructor"

		VERSION = "<<semver>>"
        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        SLASH = '/'
        PLACE_HOLDER = "_"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'

    ]
}

// https://github.com/bytecodealliance/fluent/blob/master/spec/fluent.ebnf
wit ::= statements*
private statements ::= SEMICOLON
	| package
	| world
	| include
	| define-interface
// package wasi:blobstore@0.2.0-draft;
package ::= KW_PACKAGE package-name {
	pin = 1
    mixin = "com.github.bytecodealliance.language.mixin.MixinPackage"
}
package-name ::= module-name (COLON module-name)* package-version?;
package-version ::= AT VERSION;
// world name { }
world ::= annotations KW_WORLD identifier-free world-body {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinWorld"
}
world-body ::= <<block world-element>>
private world-element ::= SEMICOLON
	| include
	| import
	| export
	| use
	| define-type
	| enum
	| variant
	| record
	| resource
	| COMMENT_LINE
// include wasi:keyvalue/imports@0.2.0-draft;
include ::= annotations KW_INCLUDE include-name {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinInclude"
}
include-name ::=
    identifier-safe (COLON identifier-safe) (SLASH interface-name) package-version?
  | interface-name
// import imports;
// import error-code: func(err: u32) -> option<u32>;
// export imports;
// export my:dep/a@0.2.0;
import    ::= annotations KW_IMPORT export-term {
	pin = 2
}
export    ::= annotations KW_EXPORT export-term {
	pin = 2
}
export-term ::= function
	| inline-interface
	| include-name
//  use wasi:poll/poll.{pollable};
//  use wasi:io/streams@0.2.0.{input-stream, output-stream};
use      ::= annotations KW_USE include-name use-items? {
	pin = 2
}
use-items ::= DOT use-body {
	pin = 1
}
use-body  ::= <<brace use-alias>>
use-alias ::= identifier-safe (KW_AS alias-name)?;
alias-name::= identifier-free;
// interface name { }
define-interface ::= annotations  KW_INTERFACE interface-name interface-body {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}
// exports: interface
inline-interface ::= interface-name COLON KW_INTERFACE interface-body {
	pin = 3
//	extends = interface
//	mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}
interface-body ::= <<block interface-element>>
private interface-element ::= SEMICOLON
	| use
	| define-type
	| resource
	| record
	| flags
	| enum
	| variant
	| function
// get-insecure-random-bytes: func(len: u64) -> list<u8>;
method ::= annotations identifier-safe COLON function-signature {
	mixin = "com.github.bytecodealliance.language.mixin.MixinMethod"
}
constructor ::= annotations KW_CONSTRUCTOR tuple (TO type-hint)? {
	pin = 2
}
function ::= annotations identifier-safe COLON function-signature {
	mixin = "com.github.bytecodealliance.language.mixin.MixinFunction"
}
function-signature ::= modifier? KW_FUNCTION tuple (TO type-hint)? {
	pin = 2
}
// =====================================================================================================
// @since(version = 0.2.0)
annotations ::= annotation*;
annotation ::= AT identifier-free annotation-body? {
	pin = 1
}
annotation-body ::= <<parenthesis annotation-pair>>
annotation-pair ::= identifier-safe EQ annotation-value
annotation-value ::= VERSION
	| identifier-safe
// type type-name = type-hint;
define-type ::= annotations KW_TYPE identifier-safe EQ type-hint {
	pin = 2
}
type-hint ::= tuple | type-generic;
type-generic ::= identifier-safe generic?;
tuple ::= <<parenthesis parameter>>;
parameter ::= identifier-safe COLON type-hint {

}
generic   ::= <<angle type-hint>>;
// resource type-name { method: func() };
resource  ::= annotations KW_RESOURCE identifier-safe resource-body? {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinResource"
}
resource-body ::= <<block resource-element>>
private resource-element ::=
    method
  | constructor
  | SEMICOLON
// record type-name { field: type-hint, key: value };
record   ::= annotations KW_RECORD identifier-safe record-body {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinRecord"
}
record-body ::= <<block record-element>>
private record-element ::=
    record-field
  | COMMA

record-field    ::= identifier-safe COLON type-hint {
    mixin = "com.github.bytecodealliance.language.mixin.MixinField"
}


flags      ::= annotations KW_FLAGS identifier-free flags-body {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinFlags"
}
flags-body ::= <<brace semantic-number>>
enum       ::= annotations KW_ENUM identifier-free enum-body {
	pin = 2
}
enum-body ::= <<brace semantic-number>>
variant   ::= annotations KW_VARIANT identifier-free variant-body {
	pin = 2
    mixin = "com.github.bytecodealliance.language.mixin.MixinVariant"
}
variant-body ::= <<brace variant-item>>
variant-item ::= identifier-safe (PARENTHESIS_L type-hint PARENTHESIS_R)? {
    mixin = "com.github.bytecodealliance.language.mixin.MixinVariantItem"
}


/* Literals */

/* Identifier */
modifier            ::= SYMBOL;
module-name         ::= SYMBOL | ESCAPED;
interface-name      ::= SYMBOL | ESCAPED;
semantic-number     ::= SYMBOL | ESCAPED;
identifier-safe     ::= SYMBOL | ESCAPED;
identifier-free     ::= SYMBOL | ESCAPED;

private meta parenthesis ::= PARENTHESIS_L (<<term>> (COMMA <<term>>)* COMMA?)? PARENTHESIS_R;
private meta brace ::= BRACE_L (<<term>> (COMMA <<term>>)* COMMA?)? BRACE_R;
private meta block ::= BRACE_L <<term>>* BRACE_R;
private meta angle ::= ANGLE_L (<<term>> (COMMA <<term>>)* COMMA?)? ANGLE_R;