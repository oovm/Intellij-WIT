{
    parserClass = "com.github.bytecodealliance.language.parser.WionParser"
    parserUtilClass = "com.github.bytecodealliance.language.psi.ParserExtension"

    extends = "com.github.bytecodealliance.language.psi.WionElement"

    psiClassPrefix = "Wion"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.bytecodealliance.language.psi"
    psiImplPackage = "com.github.bytecodealliance.language.psi_node"

    elementTypeHolderClass = "com.github.bytecodealliance.language.psi.WionTypes"
    elementTypeClass = "com.github.bytecodealliance.language.psi.WionElementType"
    tokenTypeClass = "com.github.bytecodealliance.language.psi.WionTokenType"

    psiImplUtilClass = "com.github.bytecodealliance.language.psi_node.PsiExtension"

    tokens = [
        // literal
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        EQ = '='
        COMMA = ','
    ]
}


wion ::= wion-value
wion-value ::= KW_TRUE | KW_FALSE
	| text-literal
	| dict-literal
	| list-literal
	| flag-literal
	| option-literal
	| result-literal
	| variant-literal

text-literal ::= STRING_S1 | STRING_S2;
// record { key = value}
dict-literal ::= identifier? BRACE_L (dict-item (COMMA dict-item)* COMMA?)? BRACE_R {
//    mixin = "com.github.bytecodealliance.language.mixin.MixinInclude"
}
dict-item  ::= dict-key EQUAL wion-value;
dict-key   ::= identifier;
// [true, false, 0]
list-literal ::= BRACKET_L (list-item (COMMA list-item)* COMMA?)? BRACKET_R {
//    mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}
// exports: interface
list-item ::= identifier {
//	extends = interface
//	mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}

flag-literal ::= BRACKET_L (flag-item (COMMA flag-item)* COMMA?)? BRACKET_R {

}
flag-item ::= identifier {
//	extends = interface
//	mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}
// variant()
option-literal ::= KW_SOME PARENTHESIS_L wion-value? PARENTHESIS_R
	| KW_NONE
result-literal ::=
	KW_FINE PARENTHESIS_L wion-value? PARENTHESIS_R
  | KW_FAIL PARENTHESIS_L wion-value? PARENTHESIS_R
variant-literal ::= identifier PARENTHESIS_L wion-value? PARENTHESIS_R {
//    mixin = "com.github.bytecodealliance.language.mixin.MixinWorld"
}
/* Identifier */
identifier ::= SYMBOL | KW_TRUE | KW_FALSE;
