{
    parserClass = "com.github.projectfluent.language.parser.WitParser"
    parserUtilClass = "com.github.projectfluent.language.psi.WitParserExtension"

    extends = "com.github.projectfluent.language.psi.WitElement"

    psiClassPrefix = "Wit"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.projectfluent.language.psi"
    psiImplPackage = "com.github.projectfluent.language.psi_node"

    elementTypeHolderClass = "com.github.projectfluent.language.psi.WitTypes"
    elementTypeClass = "com.github.projectfluent.language.psi.WitElementType"
    tokenTypeClass = "com.github.projectfluent.language.psi.WitTokenType"

    psiImplUtilClass = "com.github.projectfluent.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL = "Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"

		KW_PACKAGE    = "package"
		KW_WORLD      = "world"
		KW_INTERFACE  = "interface"
		KW_INCLUDE    = "include"
		KW_EXPORT     = "export"
		KW_IMPORT     = "import"
		KW_USE        = "use"
		KW_TYPE       = "type"
		KW_RESOURCE   = "resource"
		KW_RECORD     = "record"
		KW_ENUM       = "enum"
		KW_FLAGS      = "flags"
		KW_VARIANT    = "variant"
		KW_FUNCTION   = "func"

		VERSION = "<<semver>>"
        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        SLASH = '/'
        PLACE_HOLDER = "_"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

// https://github.com/projectfluent/fluent/blob/master/spec/fluent.ebnf
wit ::= statements*
private statements ::=
    package
  | world
  | include
  | interface
  | SEMICOLON

// package wasi:blobstore@0.2.0-draft;
package ::= KW_PACKAGE package-name {
	pin = 1
    mixin = "com.github.projectfluent.language.mixin.MixinPackage"
}
package-name ::=
	organization-name (COLON module-name) (AT VERSION)
  | module-name
// world name { }
world ::= KW_WORLD identifier BRACE_L world-element* BRACE_R {
	pin = 1
    mixin = "com.github.projectfluent.language.mixin.MixinWorld"
}
private world-element ::=
    include
  | import
  | export
  | use
  | SEMICOLON
  | COMMENT_LINE
// include wasi:keyvalue/imports@0.2.0-draft;
include ::= KW_INCLUDE include-name {
	pin = 1
    mixin = "com.github.projectfluent.language.mixin.MixinInclude"
}
include-name ::=
    identifier (COLON identifier) (SLASH interface-name) (AT VERSION)
  | interface-name
// import imports;
import    ::= KW_IMPORT include-name {
	pin = 1
}
// import imports;
export    ::= KW_EXPORT interface-name {
	pin = 1
}
//  use wasi:io/streams@0.2.0.{input-stream, output-stream};
use      ::= KW_USE include-name use-items? {
	pin = 1
}
use-items ::= DOT BRACE_L (identifier (COMMA identifier)* COMMA?)? BRACE_R {
	pin = 1
}
// interface name { }
interface ::= KW_INTERFACE interface-name BRACE_L interface-element* BRACE_R {
	pin = 1
    mixin = "com.github.projectfluent.language.mixin.MixinInterface"
}
private interface-element ::=
	use
  | type
  | resource
  | record
  | flags
  | enum
  | variant
  | function
  | SEMICOLON
// get-insecure-random-bytes: func(len: u64) -> list<u8>;
function ::= identifier COLON function-signature {

//	mixin = "com.github.projectfluent.language.mixin.MixinFunction"
}
function-signature ::= identifier? KW_FUNCTION function-args (TO type-hint)? {
	pin = 2
}
private function-args ::= PARENTHESIS_L (parameter (COMMA parameter)* COMMA?)? PARENTHESIS_R;
parameter ::= identifier COLON type-hint {

}
// type type-name = type-hint;
type ::= KW_TYPE identifier EQ type-hint {
	pin = 1
}
type-hint ::= identifier generic?;
generic ::= ANGLE_L (type-hint (COMMA type-hint)* COMMA?)? ANGLE_R;
// resource type-name { method: func() };
resource    ::= KW_RESOURCE identifier BRACE_L resource-element* BRACE_R {
	pin = 1
}
private resource-element ::=
    function
  | SEMICOLON
// record type-name { field: type-hint, key: value };
record   ::= KW_RECORD identifier BRACE_L record-element* BRACE_R {
	pin = 1
}
private record-element ::=
    record-field
  | COMMA

record-field    ::= identifier COLON type-hint


flags       ::= KW_FLAGS identifier BRACE_L (semantic-number (COMMA semantic-number)* COMMA?)? BRACE_R {
	pin = 1
}
enum       ::= KW_ENUM identifier BRACE_L (semantic-number (COMMA semantic-number)* COMMA?)? BRACE_R {
	pin = 1
}


variant          ::= KW_VARIANT identifier BRACE_L (variant-item (COMMA variant-item)* COMMA?)? BRACE_R {
	pin = 1
}
variant-item 	 ::= identifier (PARENTHESIS_L type-hint PARENTHESIS_R)?


/* Literals */

/* Identifier */
organization-name   ::= SYMBOL | ESCAPED;
module-name         ::= SYMBOL | ESCAPED;
interface-name      ::= SYMBOL | ESCAPED;
semantic-number     ::= SYMBOL | ESCAPED;
identifier          ::= SYMBOL | ESCAPED;